Описание проекта.

Представляет собой базовую реализацию match3 с возможностью поиграть (и пожульничать).
Есть заблокированные клетки, осыпание по диагонали, уничтожение фишек по клику, нарастающая задержка при генерации фишек, настройка через конфиг. (Эти требования были в задании)
Конфиг сделан через ScriptableObject.

Управление:
  - Пробел: начало игры. Имеет эффект только один раз, игровое поле начинает заполняться.
  - Правый клик мыши: уничтожаются фишки в виде креста 5х5 относительно положения курсора. (Форма настраивается в конфиге)
  - Перетаскивание (Drag & Drop) одной фишки на другую: фишки меняются местами. Нельзя менять местами, если одна из клеток пустая или заблокирована. Но нет ограничений на позицию, т.е. можно поменять местами любые пригодные фишки на поле, не обязательно соседние.

Как выглядит и ведет себя игровое поле:
  - При запуске игры генерируется игровое поле в соответствии с конфигом (подробнее ниже), размером M на N.
  - На игровом поле могут присутствовать заблокированные клетки, если в конфиге перечислены координаты заблокированных клеток.
  - При нажатии на пробел сверху начинают падать фишки, пока не заполнят все игровое поле.
  - Каждая новая фишка генерируется с наростающей задержкой, задержка сбрасывается, если за установленный таймаут клеткой не было сгенерировано ни одной фишки.
  - Если над клеткой заблокированно, то в нее фишки могут осыпаться по диагонали из соседних столбцов, но только когда соседний столбец заполнен выше высоты клетки.
  - Диагональное осыпание (при наличии развилок) случайно. Как в случае, когда в клетку осыпаются фишки из двух соседних столбцов, так и в случае, когда из одного столбца может осыпаться в разные диагональные клетки.
  - При совпадении трех или более фишек в ряд, они проигрывают небольшую анимацию и пропадают. На освободившееся место осыпаются фишки сверху, по тем же правилам, как при заполнении поля.
  - Фактор, определяющий, какие фишки могут совпадать друг с другом, а какие нет, назван MatchingGroup. Фишка может иметь более одного MetchingGroup. Это продемонстрировано на примере "бомбы", она встает в ряд с любыми другими типами фишек. Однако "все другие" не единственный вариант, можно указать любой список.
  - Вид фишки можно настроить так, чтобы при исчезновении она "взрывалась" и разбивала фишки вокруг. Координаты того, какие именно соседи будут задеты, настраивается. Это тоже продемонстрировано на примере "бомбы", она "взрывается" и разрушает фишки вокруг себя.

Конфиг (все объекты представлены в виде ScriptableObject):
  Конфиг игрового поля (GameConfig):
    - Ширина игрового поля в клетках.
    - Высота игрового поля в клетках.
    - Ширина клетки в пикселях.
    - Высотв клетки в пикселях.
    - Паттерн, контролирующий какие именно фишки будут уничтожены при правом клике.
    - Префабы для клеток обычной, генерирующей, заблокированной.
    - Вектор смещения генерируемой фишки относительно генерирующей клетки.
    - Скорость движения фишек.
    - Фактор увеличения задержки при генерации фишек, в секундах. (Задержка нарастает при каждой новой генерации фишек на эту величину)
    - Максимальная задержка при генерации фишек в секундах.
    - Таймаут для сброса задержки генерации фишек, в секундах.
    - Список определений фишек, которые могут генерироваться, а так же "вес", от которого зависит вероятность генерации фишки именно такого вида.
    - Список координат для заблокированных клеток.

  Определение вида фишки (TokenDefinition):
    - Спрайт для фишки.
    - Паттерн взрыва. (может быть пустым, тогда фишка при смерти не взрывается)
    - Имя триггера в контроллере анимации для вызова при смерти.
    - Имя триггера в контроллере анимации для вызова при сбросе.
    - Время, отведенное на анимацию смерти фишки, в секундах.
    - Список факторов совпадения (MatchingGroup), в которых может участвовать фишка. Если в линию встанут фишки, имеющие хотя бы одну общую MatchingGroup, то это будет матч.

  Паттерн взрыва (ExplosionPattern):
    - Список координат, по которым другие фишки должны быть уничтожены при взрыве, относительно взрываемой фишки.

  Фактор совпадения (MatchingGroup):
    - Не содержит никаких данных. Используется только факт того, что в двух переменных может оказаться такой же или не такой же MatchingGroup.

Комменты:
  - В игру можно поиграть, но в ней нет ограничений классической игры Match3. Местами можно менять какие угодно фишки, а правый клик уничтожает их просто так.
  - Блокированные клетки можно ставить где угодно, хоть даже в верхнем ряду, ничего не должно сломаться.
  - Выполненно асирхронно, с использованием TaskCompletionSource. Update используется только для перемещения фишек и для отслеживания нажатия пробела. (InputSystem подключать не стал)
  - Я использовал свой пакет AttributeEvents, может сбить с толку при просмотре кода. Можно ходить по юзингам енама, который указан в атрибуте.
  - Фишки не уничтожаются при смерти, а переиспользуются. (Pooling)
  - Фишки, которые в процессе перехода между клетками, ни в чем не участвуют, даже если рядом взрыв.
  - Старался выполнить так, чтобы создавалось поменьше мусора при работе. Асинхронные методы и foreach мусорят, но не много.
  - Старался свести поиск компонентов в рантайме к минимуму, так что в скриптах много полей с компонентами.
  - При реализации работы клеток напрашивался полиморфизм (простые, диагональные, генераторы, заблокированные), но я решил использовать простой Switch. Можно было и полиморфизм, но мне показалось, что будет проще без него в данной ситуации.
  - Вероятность выбора вида фишки при генерации равна ("вес" / "сумма всех весов в списке").
  - Присутствуют анимации, поскольку без них некомфортно играть/тестировать, фишки тогда внезапно пропадают, и не понятно, что происходит. Можно было сделать анимации лучше, добавить партиклы, звуки и так далее, но я почувствовал, что уже и так достаточно далеко отошел от первоначального задания.
  - Анимации выполнены через контроллер, в котором должны быть ноды для каждого вида анимации, но я не пытаюсь показать, что нужно делать именно так, это просто способ относительно несложно прикрутить анимации.
